/**
 * @brief Résolution @b exacte du problème de planification de personnes (choix du nombre de vacations)
 * @author Pierre-Antoine Morin
 * @warning Pour la compilation, ajouter l'option <tt>-lglpk</tt> (pour l'édition des liens vers la bibliothèque GLPK).
 * @note Le modèle de données utilisé est strictement identique à celui du programme Java réalisé pour l'heuristique.
 * @see @ref Vacation, @ref VacationType, @ref Data, @ref Solution
 */

#include "reader.h"
#include "solver.h"

#include <iostream>
#include <cstdlib>

using namespace std;

int main(const int argc, const char * argv[])
{
    int retval = EXIT_SUCCESS;
    string filename;
    const Data * data = NULL;
    if(argc >= 2)
    {
        filename = argv[1];
    }
    else
    {
        cout << "Path to the file to parse ? ";
        cin >> filename;
    }
    cout << "File to parse : \"" << filename << "\"" << endl;

    if((data = Input::read(filename.c_str())) != NULL)
    {
        cout << "Instance :" << endl;
        data->fitOutput();
        cout << *data << endl;
        Solver relaxedSolver(*data, Solver::Model::relaxed);
        if(relaxedSolver.isNotFeasible())
        {
            cout << "No solutions exist for this instance." << endl;
        }
        else
        {
            cout << "Solutions may exist for this instance." << endl;
            Solver exactSolver(*data, Solver::Model::exact);
            if(exactSolver.isNotFeasible())
            {
                cout << "No solutions exist for this instance." << endl;
            }
            else
            {
                cout << "Solutions exist for this instance." << endl;
                const Solution solution = exactSolver.generateSolution();
                if(solution.check())
                {
                    cout << solution << endl;
                }
                else
                {
                    cerr << "An error was identified after analyzing the solution generated by the solver" << endl;
                }
            }
        }
        delete data;
    }
    else
    {
        cerr << "Error while opening or parsing file \"" << filename << "\"" << endl;
        retval = EXIT_FAILURE;
    }

    return retval;
}

